/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | "Pacific/Midway"
  | "Pacific/Niue"
  | "Pacific/Honolulu"
  | "Pacific/Rarotonga"
  | "America/Anchorage"
  | "Pacific/Gambier"
  | "America/Los_Angeles"
  | "America/Tijuana"
  | "America/Denver"
  | "America/Phoenix"
  | "America/Chicago"
  | "America/Guatemala"
  | "America/New_York"
  | "America/Bogota"
  | "America/Caracas"
  | "America/Santiago"
  | "America/Buenos_Aires"
  | "America/Sao_Paulo"
  | "Atlantic/South_Georgia"
  | "Atlantic/Azores"
  | "Atlantic/Cape_Verde"
  | "Europe/London"
  | "Europe/Berlin"
  | "Africa/Lagos"
  | "Europe/Athens"
  | "Africa/Cairo"
  | "Europe/Moscow"
  | "Asia/Riyadh"
  | "Asia/Dubai"
  | "Asia/Baku"
  | "Asia/Karachi"
  | "Asia/Tashkent"
  | "Asia/Calcutta"
  | "Asia/Dhaka"
  | "Asia/Almaty"
  | "Asia/Jakarta"
  | "Asia/Bangkok"
  | "Asia/Shanghai"
  | "Asia/Singapore"
  | "Asia/Tokyo"
  | "Asia/Seoul"
  | "Australia/Brisbane"
  | "Australia/Sydney"
  | "Pacific/Guam"
  | "Pacific/Noumea"
  | "Pacific/Auckland"
  | "Pacific/Fiji";

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    flowers: Flower;
    tags: Tag;
    occasions: Occasion;
    categories: Category;
    baloons: Baloon;
    "fruit-carts": FruitCart;
    accessories: Accessory;
    indoors: Indoor;
    presents: Present;
    sweets: Sweet;
    whom: Whom;
    users: User;
    "payload-locked-documents": PayloadLockedDocument;
    "payload-preferences": PayloadPreference;
    "payload-migrations": PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    flowers: FlowersSelect<false> | FlowersSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    occasions: OccasionsSelect<false> | OccasionsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    baloons: BaloonsSelect<false> | BaloonsSelect<true>;
    "fruit-carts": FruitCartsSelect<false> | FruitCartsSelect<true>;
    accessories: AccessoriesSelect<false> | AccessoriesSelect<true>;
    indoors: IndoorsSelect<false> | IndoorsSelect<true>;
    presents: PresentsSelect<false> | PresentsSelect<true>;
    sweets: SweetsSelect<false> | SweetsSelect<true>;
    whom: WhomSelect<false> | WhomSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    "payload-locked-documents":
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>;
    "payload-preferences":
      | PayloadPreferencesSelect<false>
      | PayloadPreferencesSelect<true>;
    "payload-migrations":
      | PayloadMigrationsSelect<false>
      | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: "users";
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flowers".
 */
export interface Flower {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  categories?:
    | {
        relationTo: "categories";
        value: number | Category;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "occasions".
 */
export interface Occasion {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "baloons".
 */
export interface Baloon {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fruit-carts".
 */
export interface FruitCart {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accessories".
 */
export interface Accessory {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "indoors".
 */
export interface Indoor {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "presents".
 */
export interface Present {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sweets".
 */
export interface Sweet {
  id: number;
  name: string;
  price: string;
  description: string;
  available: boolean;
  occasions?:
    | {
        relationTo: "occasions";
        value: number | Occasion;
      }[]
    | null;
  tags?:
    | {
        relationTo: "tags";
        value: number | Tag;
      }[]
    | null;
  images?: (number | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "whom".
 */
export interface Whom {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: "media";
        value: number | Media;
      } | null)
    | ({
        relationTo: "flowers";
        value: number | Flower;
      } | null)
    | ({
        relationTo: "tags";
        value: number | Tag;
      } | null)
    | ({
        relationTo: "occasions";
        value: number | Occasion;
      } | null)
    | ({
        relationTo: "categories";
        value: number | Category;
      } | null)
    | ({
        relationTo: "baloons";
        value: number | Baloon;
      } | null)
    | ({
        relationTo: "fruit-carts";
        value: number | FruitCart;
      } | null)
    | ({
        relationTo: "accessories";
        value: number | Accessory;
      } | null)
    | ({
        relationTo: "indoors";
        value: number | Indoor;
      } | null)
    | ({
        relationTo: "presents";
        value: number | Present;
      } | null)
    | ({
        relationTo: "sweets";
        value: number | Sweet;
      } | null)
    | ({
        relationTo: "whom";
        value: number | Whom;
      } | null)
    | ({
        relationTo: "users";
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: "users";
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: "users";
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flowers_select".
 */
export interface FlowersSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  categories?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "occasions_select".
 */
export interface OccasionsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "baloons_select".
 */
export interface BaloonsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fruit-carts_select".
 */
export interface FruitCartsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accessories_select".
 */
export interface AccessoriesSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "indoors_select".
 */
export interface IndoorsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "presents_select".
 */
export interface PresentsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sweets_select".
 */
export interface SweetsSelect<T extends boolean = true> {
  name?: T;
  price?: T;
  description?: T;
  available?: T;
  occasions?: T;
  tags?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "whom_select".
 */
export interface WhomSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}

declare module "payload" {
  export interface GeneratedTypes extends Config {}
}
